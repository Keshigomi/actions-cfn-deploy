name: 'CFN Deploy Stack'
description: "Deploys a CloudFormation stack. Deletes the stack first, if it exists in a bad state."
inputs:
  stackName:
    description: 'Name of the AWS CloudFormation stack to wait for a status on'
    required: true
  templateFilePath:
    description: 'The path to the CloudFormation template file'
    required: true
  awsRegion:
    description: 'AWS Region where the stack is deployed to. Defaults to us-east-1.'
    required: true
    default: "us-east-1"
  timeoutSeconds:
    description: 'The timeout in seconds after which to stop waiting for the stack operation to complete. Defaults to 90.'
    required: true
    default: "90"
  tags:
    description: 'The tags to include. Should be a multi-line input with each key-pair on a new line, in the format like "Tag1=Value1"'
    required: false
  parameterOverrides:
    description: 'The parameters to pass into the stack. Should be a multi-line input with each key-pair on a new line, in the format like "Param1=Value1"'
    required: false

runs:
  using: 'node16'
  main: 'dist/src/index.js'

# TODO: add .github/workflows/build-deploy.yml and have it commit "dist" folder after transpile

# runs:
#   using: "composite"
#   steps:
#     - id: add-action-location-to-path
#       run: |
#         echo "${{ github.action_path }}" >> $GITHUB_PATH
#       shell: bash

#     - run: |
#         # include CloudFormation bash helpers
#         source cloud-formation-utils.sh

#         # check if the stack exists
#         cf_delete_if_bad_state "${{ inputs.stackName }}" "${{ inputs.awsRegion }}"

#         echo Deploying CloudFormation template
#         if ! aws cloudformation deploy --template-file "${{ inputs.templateFilePath}}" \
#                 --region "${{ inputs.awsRegion }}"
#                 --capabilities CAPABILITY_IAM \
#                 --stack-name "${{ inputs.stackName }}" \
#                 --tags "${{ inputs.tags }}"
#                 --parameter-overrides "${{ inputs.parameterOverrides }}"
#         then
#           echo Deploy failed.
#           cf_print_stack_events "${{ inputs.stackName }}"
#           # return false to make sure the build stops
#           false
#         else
#           cf_wait_final_status "${{ inputs.stackName }}"
#           true
#         fi
#       shell: bash
